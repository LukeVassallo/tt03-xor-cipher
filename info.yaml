--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - lukevassallo_xor_cipher.v
    - xor_cipher.v
    - signature.v
    - counter.v
    - lfsr.v
  top_module:  "lukevassallo_xor_cipher"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Luke Vassallo"
  title:        "XOR Stream Cipher"
  language:     "Verilog"
  description:  "An XOR stream cipher with a programmable galois LFSR."

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    An XOR (exclusive or) cipher is a type of encryption that uses a bitwise exclusive or operation to combine a plaintext message with a secret key. This process generates a ciphertext that can only be decrypted by someone with the same secret key. XOR ciphers are commonly used in computer security and are popular due to their simplicity and efficiency. They can be implemented in hardware using XOR cipher chips, which typically use a Galois LFSR (linear feedback shift register) to generate a key stream that is XORed with the plaintext to produce the ciphertext. XOR ciphers are considered relatively secure as long as the secret key is kept secret and is not easily guessable.

    The system uses a Galois Linear Feedback Shift Register (LFSR) to produce a key stream that is combined with the incoming bitstream through an XORing process to create the cipher stream that appears at the output. When the system is reset, an internal 256-bit bitstream generator is selected by default as the plaintext to generate the encrypted stream at the output. An external plaintext source can be selected via the configuration  vector described next.

    To configure the chip, a 131-bit configuration vector is inputted through the pin cfg_i while the current configuration is simultaneously outputted on pin cfg_o. This configuration method functions as a lengthy shift register with its input connected to cfg_i and its output connected to cfg_o. It only operates synchronously to clk when cfg_en is asserted. The configuration vector consists of 63->0 bits for the LFSR state, 127->64 bits for the LFSR taps. Power-on-reset state has the taps configured for PRBS-31 and LFSR state holding 0x55. Bit 128 is used to internally route the output stream through an XOR that decrypts the text and places the decrypted stream on the outptut pin. Bit 129 selects between the internal (default) or externally provided plaintext generator (disabled by default). Bit 130 selects between the internal (default) or externally provided key stream.  

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Refer to the repository for FPGA based testing of the design. Vivado and FOSS flows will be available soon!

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - plaintext bitstream
    - external key
    - configuration enable (cfg_en)
    - configuration input (cfg_i)
    - enable (en)
    - none
# A description of what the outputs do
  outputs:
    - encrypted stream
    - decrypted stream
    - configuration output (cfg_o)
    - heartbeat[5]
    - heartbeat[6]
    - heartbeat[7]
    - heartbeat[8]
    - heartbeat[9]

# The following fields are optional
  tag:          "timer, test"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "mattvenn#1907"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
